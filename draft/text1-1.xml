<speak version="1.0" xml:lang="ja-JP">
<voice name="ja-JP-NanamiNeural">
今回から新しく、プログラミングを使ったゲーム開発コースが始まります。
 この授業では、Pythonでゲームを作るためのライブラリ「ピクセル）」を使って、楽しくプログラミングを学んでいきます。
 授業資料を見ながらコードを描き、プログラムを実行していきましょう。必要であれば動画を一時停止したり、巻き戻したりしてもOKです。
 プログラミングを書いていると、画面に赤いエラーが出ることがあります。これは何かが間違っているという意味です。その場合は、動画を一時停止して、資料を見ながらどこが間違っているか確認しましょう。
 今日のテーマは、「Pyxelを使って画面を作る」そして「ゲームの基本構造を知る」です。
 ここで、Pyxelとはpython の中でも、ゲームを作る関連のプログラミングデータをまとめて、誰でも使えるようにした機能です。ドット絵風の2Dゲームを作成できます。 Pythonがインストールされていれば、どんなパソコンでもすぐに動かすことができます。ゲーム画面を表示したり、キャラクターを動かしたり、音を鳴らしたりがとても簡単にできます。 そして、プロのゲームクリエイターもアイデアを試すときに使うことがあるんですよ。

早速プログラムを書いていきます。
自分のIDのフォルダの中にメインドットパイが用意されています。
 まず最初に、画面を作るための基本コードを書きましょう。
 資料1の1
 <break time="2s"/>
メインドットパイにインポート文を書いてください。
 <break time="4s"/>
 ここでインポート文を書くことで、ピクセルの機能を使用することができるようになります。
 資料1の2
 <break time="2s"/>
 シャープをかくと、その右側の文字はコメントとして処理されます。エラーになりません。
 実際にシャープの右側にコメントを書いて、エラーにならないことを確認してみましょう。
 <break time="4s"/>
 資料1の3
 <break time="2s"/>
Pyxelでは、画面を初期化する、ゲームの動きを更新する関数を作る、描画する関数を作る、コードを実行する
の4ステップでゲームが動きます。

1の3に書いてある実際のコードを見ながら説明します。
 <break time="2s"/>

まず pyxel.init という命令で、ゲームウィンドウを作ります。
 この命令が、ゲームの「キャンバス」を開く役割を持っています。
 ちなみに、pyxel.init は pyxel の中の init という関数を実行するという意味です。

次に update という関数では、キャラクターを動かしたり、キー入力を処理したりする「頭脳」の部分を作ります。
 そして draw という関数では、実際にキャラクターや背景などを「描く」部分を担当します。

最後に pyxel.run という命令で、ゲームがスタートします。
 この命令は、update関数とdraw関数を毎秒60回ずつ繰り返して実行します。
 つまり、1秒間に60回「考えて」「描く」を繰り返しているということです。
 ゲームが滑らかに動くのは、この仕組みのおかげなんですね。

では、ここで実際に手を動かしてみましょう。

<break time="2s"/>
メインドットパイの続きに、資料に書かれたpyxel.init から始まるコードを書いてください。
<break time="4s"/>
エラーが出ないようにすべて入力し終えたら、右上の実行ボタンを押してみましょう。
 小さなウィンドウが開いて、真っ白な画面が表示されたら成功です。
 これが、あなたのゲームの最初の一歩です。

ここまでで、Pyxelの世界に入る準備ができました。
 次の動画では、画面の中に「図形」を描いていきます。
</voice>
</speak>