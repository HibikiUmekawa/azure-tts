<speak version="1.0" xml:lang="ja-JP">
    <voice name="ja-JP-NanamiNeural">
  
    前回は、コードを整理して、  
    ゲーム全体の流れを関数ごとに分けてすっきりさせましたね。  
    今回は、いよいよ「スタート画面」と「ゲームオーバー画面」を追加して、  
    一つの完成したゲームの形にしていきましょう。  
  
    テーマは、「ゲームの流れをデザインする」です。  
  
    <break time="1s"/>
  
    ゲームは、最初から動き始めるのではなく、  
    「スタート画面 → プレイ画面 → ゲームオーバー画面」という流れがあると、  
    ぐっと完成度が上がります。  
    まずはこの3つの状態を切り替える仕組みを作っていきましょう。  
  
    <break time="2s"/>
  
    仕組みはシンプルです。  
    「状態」を表すための変数を1つ用意します。  
    たとえば、game_stateという変数を作って、  
    その中に「start」「play」「gameover」などの値を入れて切り替えます。  
  
    どの状態かによって、update関数とdraw関数で行う処理を変える、という方法です。  
    具体的な書き方は、授業資料を見ながら確認してください。  
  
    <break time="3s"/>
  
    では、まず「スタート画面」から作っていきましょう。  
    draw関数の中で、スタート時にタイトル文字を表示するようにします。  
    「PRESS SPACE TO START」といったメッセージを出しておくとわかりやすいですね。  
  
    そして、update関数でスペースキーが押されたら、  
    ゲームの状態を「play」に変更してゲームを開始します。  
  
    実際のコードは資料を見ながら入力してみてください。  
  
    <break time="5s"/>
  
    次に「ゲームオーバー画面」を作ります。  
    プレイヤーが3回ミスしたときなど、  
    ゲームが終了したタイミングで状態を「gameover」に切り替えます。  
  
    draw関数の中で「GAME OVER」と表示し、  
    その下に「PRESS R TO RESTART」といったメッセージを出しましょう。  
    Rキーを押したら、スコアやミス回数をリセットして、  
    状態を再び「start」に戻すようにします。  
  
    <break time="6s"/>
  
    では、ここで手を動かしてみましょう。  
    スタート画面とゲームオーバー画面の表示処理を追加し、  
    スペースキーとRキーの入力で状態が切り替わるようにしてください。  
  
    実行して、タイトル画面からゲームが始まり、  
    ミス3回でゲームオーバーになったあと、再スタートできるか確認してみましょう。  
  
    <break time="6s"/>
  
    これで、ゲーム全体の流れが完成しました。  
    スタート画面からプレイが始まり、ゲームオーバーで区切りがつく。  
    これだけでも、作品としての完成度が一気に上がります。  
  
    さらに、タイトル画面の背景やフォントの色を変えたり、  
    自分の名前をタイトルの下に入れたりすると、よりオリジナリティが出ます。  
  
    <break time="3s"/>
  
    では、今日のまとめです。  
    一、ゲームの状態を変数で管理すること。  
    二、スタート画面、プレイ画面、ゲームオーバー画面を切り替えること。  
    三、入力キーで状態を遷移させることで、自然な流れを作ること。  
  
    この3つを意識すれば、ゲーム全体がぐっとわかりやすくなります。  
  
    <break time="3s"/>
  
    次の動画では、タイトル画面やゲームオーバー画面に「アニメーション」や「BGM」を追加して、  
    見た目も音も完成度の高い最終版に仕上げていきます。  
  
    それでは、次の動画でお会いしましょう。  
  
    </voice>
  </speak>
  