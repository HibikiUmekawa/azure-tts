<speak version="1.0" xml:lang="ja-JP">
    <voice name="ja-JP-NanamiNeural">
  
    前回の動画では、Pyxelで図形を描く方法を学びましたね。  
    四角や円、線を使って、自分の好きな形を描けたでしょうか。  
  
    今回は、画面に「文字」を表示する方法と、  
    「変数」を使って動きをつける方法を学んでいきます。  
  
    <break time="1s"/>
  
    まず、Pyxelで文字を表示する命令は pyxel.text です。  
    たとえば、画面の左上に「Hello」と表示したいときは、  
    pyxel.text に位置と文字列、そして色を指定します。  
    文字の位置も、図形と同じように、座標で決めます。  
  
    たとえば、横が10、縦が10、色が7の場所に文字を出したいときは、  
    pyxel.text のあとに 10, 10, "Hello", 7 と指定します。  
    これで白い文字が左上に表示されます。  
  
    <break time="2s"/>
  
    では、ここで実際に手を動かしてみましょう。  
    メインドットパイの draw 関数の中に、pyxel.text を使って、  
    自分の名前やニックネームを表示してみてください。  
    さらに、好きな色の番号を選んで、文字の色を変えてみましょう。  
    Pyxelでは、0から15までの16色が使えます。  
    青や赤、黄色など、自分らしい配色を試してみてください。  
    <break time="5s"/>
  
    ここまでできたら、次は「変数」を使って、  
    プログラムの中で値を動かしてみましょう。  
  
    たとえば、顔の位置や色を「変数」として設定しておくと、  
    その値を変えるだけで、プログラム全体の見た目を簡単に変えられます。  
  
    <break time="1s"/>
  
    たとえば、顔の位置を管理する変数を face_x や face_y、  
    背景の色を bg_color としてみましょう。  
    そして、pyxel.circ で顔を描くときに、  
    数字の代わりにその変数名を書いてみます。  
    すると、その変数の値を変えるだけで、  
    顔の位置や色が簡単に変わるようになります。  
  
    <break time="2s"/>
  
    ここで実践です。  
    draw関数の中にある pyxel.circ や pyxel.cls の数字を、  
    変数に置き換えてみてください。  
    ファイルの先頭に、bg_color や face_x の変数を定義しておきます。  
    変数を使うことで、同じ図形を何度も書き換えずに済みます。  
  
    たとえば、bg_color の数字を1から12に変えるだけで、  
    背景の色が青から明るい水色に変わる、というように簡単に操作できます。  
    <break time="5s"/>
  
    ここまでできたら、実行して動きを確認してみましょう。  
    変数の値を変えてもう一度実行すると、画面の見た目がどう変わるかがわかります。  
    これが、プログラムで「動きをつける」第一歩です。  
  
    <break time="2s"/>
  
    では、少し発展して、計算を使ってみましょう。  
    たとえば、画面の中央を計算で出したいときには、  
    画面の幅を2で割った値を使います。  
    160割る2は80なので、中心のx座標は80ということですね。  
    このように、「160 // 2」というように書くと、自動で計算してくれます。  
    <break time="3s"/>
  
    計算と変数を組み合わせることで、  
    例えば、同じ間隔で円を並べることもできます。  
    for文を使って、20、50、80というように、  
    規則的に位置をずらすこともできるようになります。  
  
    <break time="3s"/>
  
    では、ここで手を動かしてみましょう。  
    自分の好きな色や形を使って、画面にいくつかの円を並べてみてください。  
    どのくらいの間隔にすれば見やすいか、試行錯誤しながら作ってみましょう。  
    <break time="5s"/>
  
    今回学んだのは、「文字を表示する命令」と「変数の活用」、  
    そして「計算で配置を工夫する方法」でした。  
  
    これができるようになると、  
    自分の作品をプログラムで柔軟にデザインできるようになります。  
  
    <break time="1s"/>
  
    次の動画では、ここまでの学びを使って、  
    自分の「マイプロフィールカード」を作ります。  
    図形や文字、色を組み合わせて、自分を表現する作品を作っていきましょう。  
  
    </voice>
  </speak>
  