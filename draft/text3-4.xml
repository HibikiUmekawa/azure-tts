<speak version="1.0" xml:lang="ja-JP">
    <voice name="ja-JP-NanamiNeural">
  
    ここまでで、スコアの演出や光のエフェクトが完成しましたね。  
    取った瞬間に光ったり、スコアが動いたりして、かなりゲームらしくなってきました。  
  
    今回はいよいよ、「効果音」と「難易度の調整」を行っていきます。  
    これが完成すると、ひとつのしっかりしたアクションゲームになります。  
  
    <break time="1s"/>
  
    まずは「効果音」からいきましょう。  
    音があるだけで、ゲームの臨場感は大きく変わります。  
    スコアが増えるときに「ピッ」という音を鳴らしたり、  
    ミスしたときに「ブッ」という低い音を鳴らしたりするだけで、  
    目だけでなく耳でも状況を感じ取れるようになります。  
  
    <break time="2s"/>
  
    Pyxelには、音を鳴らすための機能が最初から用意されています。  
    音のデータを作るには「エディタ」機能を使い、  
    その音をプログラムの中で呼び出すだけで簡単に再生できます。  
  
    具体的な設定方法や音の登録の仕方は、授業資料を見ながら確認してください。  
    今回は、スコアが上がったときに1種類、ミスしたときにもう1種類の音を設定してみましょう。  
  
    <break time="4s"/>
  
    では、ここで実践してみましょう。  
    スコアが上がる処理のすぐ後に、効果音を鳴らす命令を追加してみてください。  
    ミスしたときにも別の音を鳴らすことで、  
    成功と失敗が自然に区別できるようになります。  
  
    実際に動かしてみると、「取れた！」「あ、落とした！」という感覚が  
    音でも伝わってくるようになります。  
  
    <break time="5s"/>
  
    では次に、「難易度の調整」をしていきましょう。  
    ずっと同じスピードでアイテムが落ちてくると、  
    ゲームが少し単調に感じてしまいます。  
    そこで、スコアが上がるごとにスピードを少しずつ速くしていきます。  
  
    <break time="2s"/>
  
    方法はシンプルです。  
    スコアの値に応じて、落下スピードの上限を少しずつ上げるようにします。  
    たとえば、スコアが10を超えたら少し速く、20を超えたらさらに速く、というように段階的に上げていきます。  
  
    実際の条件の書き方や計算式は、授業資料を見ながら確認してください。  
  
    <break time="4s"/>
  
    では、ここで手を動かしてみましょう。  
    落下物を作っている部分に、スコアを参照してスピードを変える処理を追加します。  
    実行してみると、スコアが上がるほど落下が速くなり、だんだん難しくなっていくのがわかります。  
  
    このように「プレイヤーの上達に合わせて難易度が上がる仕組み」を入れると、  
    ゲームに長く夢中になれるようになります。  
  
    <break time="6s"/>
  
    さらに、もし余裕がある人は、BGMも追加してみましょう。  
    ゲーム開始時に明るい曲、ゲームオーバー時に静かな曲を流すなど、  
    雰囲気づくりに音を使うと、作品の完成度がぐっと上がります。  
    BGMの設定方法も資料に載っていますので、挑戦してみてください。  
  
    <break time="4s"/>
  
    では、今回のまとめです。  
    一、スコアアップやミス時に効果音を追加する。  
    二、スコアに応じてスピードを上げることで難易度を調整する。  
    三、音と動きの両方で「気持ちよさ」と「緊張感」を演出する。  
  
    この3つを取り入れるだけで、ゲームは見た目以上に完成度が上がります。  
  
    <break time="3s"/>
  
    次の動画では、今回までの内容をまとめて、  
    一つの「完成版ゲーム」として仕上げます。  
    画面の構成、動き、音、すべてを組み合わせて、  
    あなたのオリジナル作品を完成させましょう。  
  
    それでは、次の動画でお会いしましょう。  
  
    </voice>
  </speak>
  