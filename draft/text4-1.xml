<speak version="1.0" xml:lang="ja-JP">
    <voice name="ja-JP-NanamiNeural">
  
    こんにちは。  
    いよいよ今回から、「第4回：ゲーム完成とリファクタリング」に入ります。  
  
    前回までで、プレイヤーの動き、スコアの演出、効果音、難易度の調整までできましたね。  
    今回からは、それらをまとめて一つの完成作品として仕上げていきます。  
  
    テーマは、「コードを整理して、完成版を作る」です。  
  
    <break time="1s"/>
  
    ここまでで作ったゲームは、すでにしっかり動く状態ですが、  
    各機能を追加していくうちに、プログラムが少し長く、複雑になってきたはずです。  
    そこで、まず最初に「リファクタリング」を行います。  
  
    リファクタリングとは、プログラムの動きを変えずに、  
    中身を整理して読みやすくする作業のことです。  
  
    <break time="2s"/>
  
    たとえば、同じような処理が何度も出てくる部分を「関数」にまとめたり、  
    意味のある名前をつけて変数を整理したりします。  
  
    これをしておくことで、あとから修正しやすくなり、  
    バグも減り、チームで開発するときにも役立ちます。  
  
    <break time="2s"/>
  
    では、ここで資料を開いてみましょう。  
    今回は、これまでのコードの中で「update関数」と「draw関数」を中心に整理していきます。  
  
    まずは、長くなっているupdate関数を分割します。  
    プレイヤーの動き、落下物の更新、スコアの判定などを、それぞれ別の関数に分けましょう。  
    関数の定義方法や呼び出し方は、授業資料を見ながら確認してください。  
  
    <break time="5s"/>
  
    次に、変数を整理します。  
    ゲーム全体で使う値と、関数の中だけで使う値を区別しておきましょう。  
    たとえば、プレイヤーの位置やスコアのように、  
    複数の関数から参照するものは「グローバル変数」としてまとめておくと良いです。  
  
    逆に、一時的に使う値は関数の中で定義します。  
    これを意識するだけで、コードの見通しがかなり良くなります。  
  
    <break time="5s"/>
  
    では、ここで実際に整理作業をしてみましょう。  
    資料にある完成版の構造を参考にしながら、  
    それぞれの処理を関数として切り出していってください。  
  
    「update_player」「update_objects」「check_collision」「draw_score」など、  
    意味のある関数名をつけておくと、読みやすくなります。  
  
    <break time="6s"/>
  
    整理ができたら、実行して動作を確認してみましょう。  
    ゲームの見た目や動きは変わっていませんか？  
    正しく動いていれば、それが「リファクタリング成功」です。  
  
    動きが変わっていないのに、コードがすっきりしていたら大成功です。  
  
    <break time="3s"/>
  
    では、今日のまとめです。  
    一、リファクタリングとは、動きを変えずにコードを整理すること。  
    二、関数で処理を分けると、見通しが良くなること。  
    三、変数のスコープを意識して、必要な場所で定義すること。  
  
    この3つを意識することで、今後どんなゲームを作るときにも役立ちます。  
  
    <break time="3s"/>
  
    次の動画では、整理したコードに「スタート画面」と「ゲームオーバー画面」を追加して、  
    完成版の流れを作っていきます。  
    ゲームとしての体験が、一気に完成に近づきますよ。  
  
    それでは、次の動画でお会いしましょう。  
  
    </voice>
  </speak>
  