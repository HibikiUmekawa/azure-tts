<speak version="1.0" xml:lang="ja-JP">
    <voice name="ja-JP-NanamiNeural">
  
    こんにちは。  
    今回の授業は、「第3回：スコア演出と難易度調整」です。  
  
    前回までの授業で、落下物をキャッチしてスコアを増やし、  
    3回ミスでゲームが終わるところまで完成しましたね。  
    今回からは、そのゲームに「手ごたえ」と「面白さ」を加えていきます。  
  
    <break time="1s"/>
  
    今日のテーマは、「キーボード入力の制御」と「操作の快適さ」です。  
    ゲームの操作は、ただ動けばいいというものではなく、  
    プレイヤーが思った通りに動くことが大切です。  
    この回では、キーボードの入力を自在に扱えるようにしていきましょう。  
  
    <break time="2s"/>
  
    まず、Pyxelでキー入力を扱うときに使う命令を整理します。  
    すでに何度か登場していますが、改めて確認しておきましょう。  
  
    Pyxelには、主に2種類のキー入力関数があります。  
    一つ目は「押している間ずっと反応する」関数。  
    二つ目は「押した瞬間だけ反応する」関数です。  
  
    たとえば、右キーを押しっぱなしにしているとキャラクターが動き続けるのは「押している間ずっと」のタイプ。  
    一方で、スペースキーなどの「押した瞬間だけ反応する」動きにはもう一方の関数を使います。  
  
    <break time="3s"/>
  
    では、ここで実際に試してみましょう。  
    資料のコードを参考に、スペースキーを押した瞬間だけ反応するプログラムを作ってみてください。  
    実行してスペースキーを押すと、コンソールに一度だけメッセージが表示されます。  
    何度も押すと、そのたびに一回ずつ反応することが確認できます。  
  
    <break time="6s"/>
  
    では、考えてみましょう。  
    プレイヤーを左右に動かすときは「押している間ずっと反応する」関数を使うのが適しています。  
    逆に、「ジャンプ」や「決定」など一回だけの操作は「押した瞬間だけ反応する」関数が合います。  
  
    つまり、操作の種類によって使い分けることが、快適な操作感につながるということです。  
  
    <break time="3s"/>
  
    次に、方向キーの一覧を確認しておきましょう。  
    上矢印は「KEY_UP」、下矢印は「KEY_DOWN」、  
    左矢印は「KEY_LEFT」、右矢印は「KEY_RIGHT」です。  
    それ以外にも、AキーからZキー、数字キー、スペース、エンターなどを指定できます。  
  
    <break time="3s"/>
  
    では、これらを使って「プレイヤーの移動をさらに滑らかに」してみましょう。  
    前回までは左右移動だけでしたが、  
    今回は上下方向の入力も追加して、自由に動けるようにします。  
  
    資料のコードを参考に、update関数に上下キーの処理を追加してください。  
    実行すると、プレイヤーを上下左右に動かせるようになります。  
  
    <break time="5s"/>
  
    実際に動かしてみると、キャラクターがより滑らかに操作できるようになります。  
    この「操作していて気持ちいい感覚」は、ゲーム作りにおいてとても大切な要素です。  
  
    <break time="2s"/>
  
    では、今日のまとめです。  
    一、キー入力の2種類の関数の違いを理解すること。  
    二、方向キーを使って上下左右に移動できるようにすること。  
    三、操作の気持ちよさを意識して、使い分けること。  
  
    この3つを意識するだけで、プレイヤー操作の質がぐっと上がります。  
  
    <break time="3s"/>
  
    次の動画では、今回の操作を応用して「スピードの変化」や「慣性の動き」を加え、  
    より自然なキャラクターの動きを作っていきます。  
    それでは、次の動画でお会いしましょう。  
  
    </voice>
  </speak>
  